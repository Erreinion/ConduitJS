/**
 * conduitjs - Give any method a pre/post invocation pipeline....
 * Author: Jim Cowart (http://freshbrewedcode.com/jimcowart)
 * Version: v0.2.0
 * Url: http://github.com/ifandelse/ConduitJS
 * License: MIT
 */
(function(t,n){"object"==typeof module&&module.exports?module.exports=n():"function"==typeof define&&define.amd?define(n(t)):t.Conduit=n(t)})(this,function(){function t(t){if("function"!=typeof t.target)throw new Error("You can only make functions into Conduits.");var n={pre:t.pre||[],post:t.post||[],all:[]},e=t.context,o={isTarget:!0,fn:t.sync?function(){var n=Array.prototype.slice.call(arguments,0),o=t.target.apply(e,n);return o}:function(n){var o=Array.prototype.slice.call(arguments,1);o.splice(1,1,t.target.apply(e,o)),n.apply(this,o)}},r=function(){n.all=n.pre.concat([o].concat(n.post))};r();var c=function(){var o,r=0,c=function p(){var c,a=Array.prototype.slice.call(arguments,0),u=r;r+=1,u<n.all.length&&(c=n.all[u],t.sync?(o=c.fn.apply(c.context||e,a),p.apply(this,[o].concat(a.slice(1)))):c.fn.apply(c.context||e,[p].concat(a)))};return c.apply(this,arguments),o};return c.steps=function(){return n.all},c.context=function(t){return 0===arguments.length?e:void(e=t)},c.before=function(t,e){t="function"==typeof t?{fn:t}:t,e=e||{},e.prepend?n.pre.unshift(t):n.pre.push(t),r()},c.after=function(t,e){t="function"==typeof t?{fn:t}:t,e=e||{},e.prepend?n.post.unshift(t):n.post.push(t),r()},c.clear=function(){n={pre:[],post:[],all:[]}},c}return{Sync:function(n){return n.sync=!0,t.call(this,n)},Async:function(n){return t.call(this,n)}}});